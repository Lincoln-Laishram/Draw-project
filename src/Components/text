import { useEffect, useRef, useState } from "react";

type Rectangle = {
    x: number;
    y: number;
    width: number;
    height: number;
    color: string;
    lineWidth: number;
};

export const Canvas = () => {
    const canvasRef = useRef<HTMLCanvasElement | null>(null);
    const ctxRef = useRef<CanvasRenderingContext2D | null>(null);
    const [isDrawing, setIsDrawing] = useState(false);
    const [startX, setStartX] = useState(0);
    const [startY, setStartY] = useState(0);
    const [currentTool, setCurrentTool] = useState("pen"); // Track the selected tool
    const [color, setColor] = useState("black");
    const [lineWidth, setLineWidth] = useState(5);
    const [rectangles, setRectangles] = useState<Rectangle[]>([]); // Store all rectangles

    useEffect(() => {
        const canvas = canvasRef.current;
        if (!canvas) return;
        const ctx = canvas.getContext("2d");
        if (!ctx) return;

        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.globalAlpha = 0.8;
        ctx.strokeStyle = color;
        ctx.lineWidth = lineWidth;
        ctxRef.current = ctx;
    }, [color, lineWidth]);

    const startDrawing = (e: React.MouseEvent<HTMLCanvasElement>) => {
        if (!ctxRef.current) return;

        if (currentTool === "rectangle") {
            setStartX(e.nativeEvent.offsetX);
            setStartY(e.nativeEvent.offsetY);
        } else if (currentTool === "pen") {
            ctxRef.current.beginPath();
            ctxRef.current.moveTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);
        }

        setIsDrawing(true);
    };

    const draw = (e: React.MouseEvent<HTMLCanvasElement>) => {
        if (!isDrawing || !ctxRef.current) return;
        const ctx = ctxRef.current;

        if (currentTool === "pen") {
            ctx.lineTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);
            ctx.stroke();
        } else if (currentTool === "rectangle") {
            const rectX = startX;
            const rectY = startY;
            const rectWidth = e.nativeEvent.offsetX - startX;
            const rectHeight = e.nativeEvent.offsetY - startY;

            // Redraw all rectangles to avoid clearing them
            ctx.clearRect(0, 0, canvasRef.current!.width, canvasRef.current!.height);
            rectangles.forEach((rect) => {
                ctx.strokeStyle = rect.color;
                ctx.lineWidth = rect.lineWidth;
                ctx.strokeRect(rect.x, rect.y, rect.width, rect.height);
            });

            // Draw the current rectangle dynamically
            ctx.strokeStyle = color;
            ctx.lineWidth = lineWidth;
            ctx.strokeRect(rectX, rectY, rectWidth, rectHeight);
        }
    };

    const endDrawing = (e: React.MouseEvent<HTMLCanvasElement>) => {
        if (!ctxRef.current) return;
        setIsDrawing(false);

        if (currentTool === "rectangle") {
            const rectWidth = e.nativeEvent.offsetX - startX;
            const rectHeight = e.nativeEvent.offsetY - startY;

            // Save the rectangle to the list
            setRectangles((prevRectangles) => [
                ...prevRectangles,
                { x: startX, y: startY, width: rectWidth, height: rectHeight, color, lineWidth },
            ]);
        }
    };

    return (
        <>
            <canvas
                ref={canvasRef}
                onMouseDown={startDrawing}
                onMouseUp={endDrawing}
                onMouseMove={draw}
                style={{ border: "1px solid black" }}
                width={1400}
                height={720}
            />
            <br />
            <button
                onClick={() => {
                    setCurrentTool("pen");
                    setColor("black");
                    setLineWidth(5);
                }}
            >
                Pen
            </button>
            <button
                onClick={() => {
                    setCurrentTool("pen");
                    setColor("white");
                    setLineWidth(15);
                }}
            >
                Eraser
            </button>
            <button
                onClick={() => {
                    setCurrentTool("rectangle");
                    setColor("black");
                    setLineWidth(5);
                }}
            >
                Rectangle
            </button>
        </>
    );
};
